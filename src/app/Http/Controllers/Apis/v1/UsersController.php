<?php

namespace App\Http\Controllers\Apis\v1;

use Carbon\Carbon;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use App\Models\User;
use App\Http\Resources\User as UserResource;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Traits\HandlesJsonResponse;
use App\Traits\HandlesUser;

class UsersController extends Controller
{
    use HandlesUser, HandlesJsonResponse;
    /**
     * Create a new controller instance.
     *
     * @return void
     */

    private $foundMultipleMessage = 'response.messages.found_multiple';
    private $addedMessage = 'response.messages.added';
    private $foundMessage = 'response.messages.found';
    private $deletedMessage = 'response.messages.deleted';
    private $updatedMessage = 'response.messages.updated';
    private $notFoundMessage = 'response.messages.not_found';
    private $notFoundError = 'response.errors.not_found';
    private $notFoundErrorCode = 'response.codes.not_found_error';
    private $successCode = 'response.codes.success';
    private $userAttribute = 'user';
    private $usersAttribute = 'users';
    private $isRequiredString = 'required|string|max:255';
    private $isNullableString = 'nullable|string|max:255';
    private $isNullableBoolean = 'nullable|boolean';
    private $firstName = 'first_name';
    private $middleName = 'middle_name';
    private $lastName = 'last_name';
    private $email = 'email';
    private $avatar = 'avatar';
    private $passwordString = 'password';
    private $phoneNumber = 'phone_number';
    private $gender = 'gender';
    private $corpsMemberId = 'corps_member_id';
    private $placeOfDeployment = 'place_of_deployment';
    private $batch = 'batch';
    private $nextOfKin = 'next_of_kin';
    private $nextOfKinPhone = 'next_of_kin_phone';
    private $emailVerificationCodeString = 'email_verification_code';
    private $skipEmailVerification = 'skip_email_verification';
    private $status = 'status';
    private $message = 'message';

    public function fetchUserInstance(Request $request){
      return (new UserResource($request->user()))
            ->additional([
              $this->status => true,
              'code' => __($this->successCode),
              $this->message => __($this->foundMessage, ['attr' => $this->userAttribute]),
            ], 200);
    }

    public function fetch(Request $request, $limit = null){
      $users = $this->fetchUser($request, $limit);

      return UserResource::collection($users)
              ->additional([
                $this->status => true,
                'code' => __($this->successCode),
                $this->message => __($this->foundMultipleMessage, ['attr' => $this->usersAttribute]),
              ], 200);
    }

    public function store(Request $request){
      $rules = [
        $this->firstName => $this->isRequiredString,
        $this->middleName => $this->isNullableString,
        $this->lastName => $this->isRequiredString,
        $this->passwordString => $this->isNullableString.'|confirmed',
        $this->email => 'required|email|max:255|unique:users',
        $this->phoneNumber => $this->isRequiredString.'|unique:users',
        $this->gender => $this->isRequiredString,
        $this->corpsMemberId => $this->isNullableString.'|unique:users',
        $this->avatar => $this->isNullableString,
        $this->placeOfDeployment => $this->isNullableString,
        $this->batch => $this->isNullableString,
        $this->nextOfKin => $this->isNullableString,
        $this->nextOfKinPhone => $this->isNullableString,
        $this->isAdmin = $this->isNullableBoolean
       ];

      $validator =  Validator::make($request->all(), $rules);

      if($validator->fails()){
        return $this->jsonValidationError($validator);
      }

      // $autoGeneratedPassword = Str::random(16);
      $autoGeneratedPassword = "password";

      $password = $request->input($this->passwordString) !== null ? Hash::make($request->input($this->passwordString)) : Hash::make($autoGeneratedPassword);

      $user = User::create([
        $this->firstName => $request->input($this->firstName),
        $this->middleName => $request->input($this->middleName),
        $this->lastName => $request->input($this->lastName),
        $this->email => $request->input($this->email),
        $this->passwordString => $password,
        $this->phoneNumber => $request->input($this->phoneNumber),
        $this->gender => $request->input($this->gender),
        $this->corpsMemberId => $request->input($this->corpsMemberId),
        $this->avatar => $request->input($this->avatar),
        $this->placeOfDeployment => $request->input($this->placeOfDeployment),
        $this->batch => $request->input($this->batch),
        $this->nextOfKin => $request->input($this->nextOfKin),
        $this->nextOfKinPhone => $request->input($this->nextOfKinPhone),
        'is_admin' => $request->is_admin ? $request->is_admin : false,
      ]);

      $user->location()->create();

      return (new UserResource($user))
            ->additional([
              $this->status => true,
              'code' => __($this->successCode),
              $this->message => __($this->addedMessage, ['attr' => 'user'])
            ], 201);
    }

    public function update(Request $request, $id){
      $user = User::find($id);

      if(!$user){
        return $this->jsonResponse(__($this->notFoundMessage, ['attr' => $this->userAttribute]), __($this->notFoundErrorCode), 404, [], __($this->notFoundError));
      }

      $rules = [
        $this->avatar => $this->isNullableString,
        $this->nextOfKin => $this->isNullableString,
        $this->nextOfKinPhone => $this->isNullableString,
      ];

      $validator =  Validator::make($request->all(), $rules);

      if($validator->fails()){
        return $this->jsonValidationError($validator);
      }

      $user->fill([
        $this->avatar => $request->input($this->avatar) ? $request->input($this->avatar) : $user->avatar,
        $this->nextOfKin => $request->input($this->nextOfKin) ? $request->input($this->nextOfKin) : $user->next_of_kin,
        $this->nextOfKinPhone => $request->input($this->nextOfKinPhone) ? $request->input($this->nextOfKinPhone) : $user->next_of_kin,
      ])->save();

      return (new UserResource($user))
            ->additional([
              $this->status => true,
              'code' => __($this->successCode),
              $this->message => __($this->updatedMessage, ['attr' => $this->userAttribute]),
            ], 200);
    }

    public function destroy($id){
      $user = User::find($id);

      $old = $user;

      if(!$user){
        return $this->jsonResponse(__($this->notFoundMessage, ['attr' => $this->userAttribute]), __($this->notFoundErrorCode), 404, [], __($this->notFoundError));
      }

      $user->delete();

      return (new UserResource($old))
            ->additional([
              $this->status => true,
              'code' => __($this->successCode),
              $this->message => __($this->deletedMessage, ['attr' => $this->userAttribute]),
            ], 200);
    }
}
